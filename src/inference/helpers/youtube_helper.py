import isodate
from datetime import datetime
from urllib.parse import urlparse, parse_qs
from src.config.configs import settings
from googleapiclient.discovery import build
import requests

from src.inference.helpers.caption_helper import YouTubeCaptionFetcher

class YoutubeAPIManager:
    def __init__(self, url: str):
        self.url = url
        self.video_id = self.extract_video_id()
        self.youtube = build("youtube", "v3", developerKey=settings.DEVELOPER_KEY)

        self.title = None
        self.author = None
        self.length = None
        self.publication_data = None

        # self.fetch_video_metadata()
    
    def extract_video_id(self,) -> str:
        query = urlparse(self.url)
        if query.hostname == "youtu.be":
            return query.path[1:]
        elif "youtube" in query.hostname:
            return parse_qs(query.query).get("v", [""])[0]
        return ""
    
    def fetch_video_metadata(self, ):
        response = self.youtube.videos().list(
            part="snippet,contentDetails",
            id=self.video_id
        ).execute()

        item = response["items"][0]
        snippet = item["snippet"]
        content_details = item["contentDetails"]

        duration_seconds = content_details["duration"]

        self.title = snippet["title"]
        self.author = snippet["channelTitle"]
        self.publication_data = snippet["publishedAt"]
        self.length = duration_seconds
    

    def fetch_transcript(self, lang: str = "en"):
        fetcher = YouTubeCaptionFetcher(self.video_id, settings.DEVELOPER_KEY)
        print("Available languages:", fetcher.get_available_languages())
    
        # Get detailed caption info
        print("\nCaption info:")
        info = fetcher.get_caption_info()
        if info:
            for track in info:
                print(f"  {track['language']}: {track['name']} ({'auto' if track['isAutoGenerated'] else 'manual'})")
        
        # Fetch transcript
        transcript = fetcher.fetch_transcript(lang="en", format="vtt")
        if transcript:
            return transcript
        else:
            print("Could not fetch transcript")
            return None
    
    
    def get_duration_in_minutes(self, duration_str: str) -> float:
        duration = isodate.parse_duration(duration_str)
        return round(duration.total_seconds() / 60, 2)

    def main(self,):
        publish_date = self.publication_data
        publish_date = datetime.strptime(publish_date, "%Y-%m-%dT%H:%M:%SZ")
        pub_day = publish_date.strftime("%A")
        hour = publish_date.hour

        if hour < 12:
            pub_day_time = "Morning"
        elif hour < 17:
            pub_day_time = "Afternoon"
        elif hour < 21:
            pub_day_time = "Evening"
        else:
            pub_day_time = "Night"


        return {
            "podcast_name": self.author,
            "episode_title": self.title,
            "episode_length": self.get_duration_in_minutes(self.length),  # in minutes
            # "genre": genre,
            # "host_popu_percentage": round(random.uniform(50, 100), 2),
            "pub_day": pub_day,
            "pub_day_time": pub_day_time,
            # "guest_popu_percentage": round(random.uniform(0, 50), 2),
            # "nums_of_ads": random.randint(0, 5),
            # "episode_sentiment": episode_sentiment,
            # "transcript": transcript
        }